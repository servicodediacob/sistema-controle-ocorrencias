import '../config/envLoader'; // Carrega as vari√°veis de ambiente primeiro
import db from '../db';
import jwt from 'jsonwebtoken';

async function runDiagnostics() {
  console.log('--- INICIANDO DIAGN√ìSTICO DO AMBIENTE ---');
  let hasError = false;

  // 1. Verificar Conex√£o com o Banco de Dados
  try {
    const timeResult = await db.query('SELECT NOW()');
    console.log('‚úÖ [DB] Conex√£o com o banco de dados bem-sucedida.');
    console.log(`   - Hor√°rio do Servidor de DB: ${timeResult.rows[0].now}`);
  } catch (error) {
    console.error('‚ùå [DB] FALHA na conex√£o com o banco de dados.');
    console.error(`   - Erro: ${(error as Error).message}`);
    hasError = true;
  }

  // 2. Verificar Vari√°veis de Ambiente Essenciais
  const jwtSecret = process.env.JWT_SECRET;
  if (jwtSecret && jwtSecret.length > 10) {
    console.log('‚úÖ [ENV] Vari√°vel JWT_SECRET est√° presente e tem um tamanho razo√°vel.');
  } else {
    console.error('‚ùå [ENV] FALHA: A vari√°vel JWT_SECRET n√£o est√° definida ou √© muito curta.');
    hasError = true;
  }

  // 3. Testar funcionalidade do JWT
  try {
    const testPayload = { id: 1, role: 'admin' };
    const token = jwt.sign(testPayload, jwtSecret as string, { expiresIn: '1s' });
    jwt.verify(token, jwtSecret as string);
    console.log('‚úÖ [JWT] Gera√ß√£o e verifica√ß√£o de token funcionando corretamente.');
  } catch (error) {
    console.error('‚ùå [JWT] FALHA ao gerar ou verificar token JWT.');
    console.error(`   - Erro: ${(error as Error).message}`);
    hasError = true;
  }

  console.log('--- DIAGN√ìSTICO CONCLU√çDO ---');

  if (hasError) {
    console.error('\nüî¥ O diagn√≥stico encontrou um ou mais erros cr√≠ticos. O deploy pode falhar.');
    process.exit(1); // Encerra com c√≥digo de erro
  } else {
    console.log('\nüü¢ Diagn√≥stico conclu√≠do com sucesso. O ambiente parece saud√°vel.');
    process.exit(0); // Encerra com sucesso
  }
}

runDiagnostics();
