const apiService = {
  login: (credentials: { email: string; senha: string }): Promise<{ token: string }> => {
    // ======================= MODO DE DIAGNÓSTICO (ETAPA 3) =======================
    console.log('[DIAGNÓSTICO | api.ts] 3. Dados sendo enviados para a API:', credentials);
    // ==========================================================================
    return api.post('/auth/login', credentials);
  },

  // ... (todas as suas outras funções de apiService)
  solicitarAcesso: (payload: ISolicitacaoAcessoPayload): Promise<{ message: string }> => api.post('/acesso/solicitar', payload),
  getSolicitacoes: (): Promise<ISolicitacao[]> => api.get('/acesso'),
  gerenciarSolicitacao: (id: number, acao: 'aprovar' | 'recusar'): Promise<{ message: string }> => api.put(`/acesso/${id}/gerenciar`, { acao }),
  getCrbms: (): Promise<ICrbm[]> => api.get('/crbms'),
  getCidades: (): Promise<ICidade[]> => api.get('/unidades'),
  getNaturezas: (): Promise<IDataApoio[]> => api.get('/naturezas'),
  getNaturezasPorNomes: (nomes: string[]): Promise<IDataApoio[]> => api.post('/naturezas/por-nomes', { nomes }),
  criarOcorrencia: (payload: IOcorrenciaPayload): Promise<{ message: string; ocorrenciaId: number }> => api.post('/ocorrencias', payload),
  getOcorrencias: (page = 1, limit = 10): Promise<IPaginatedOcorrencias> => api.get(`/ocorrencias?page=${page}&limit=${limit}`),
  updateOcorrencia: (id: number, data: { data_ocorrencia: string; natureza_id: number; obm_id: number; }): Promise<{ message: string; ocorrencia: IOcorrencia }> => api.put(`/ocorrencias/${id}`, data),
  deleteOcorrencia: (id: number): Promise<{ message: string }> => api.delete(`/ocorrencias/${id}`),
  setOcorrenciaDestaque: (ocorrencia_id: number | null): Promise<any> => api.post('/plantao/destaque', { ocorrencia_id }),
  getDashboardStats: (): Promise<IDashboardStats> => api.get('/dashboard/stats'),
  getPlantao: (): Promise<IPlantao> => api.get('/plantao'),
  getSupervisores: (): Promise<ISupervisor[]> => api.get('/plantao/supervisores'),
  setSupervisorPlantao: (usuario_id: number | null): Promise<any> => api.post('/plantao/supervisor', { usuario_id }),
  getUsuarios: (): Promise<IUser[]> => api.get('/usuarios'),
  criarUsuario: (data: Omit<IUser, 'id'> & { senha?: string }): Promise<{ message: string; usuario: IUser }> => api.post('/usuarios', data),
  updateUsuario: (id: number, data: Partial<IUser>): Promise<{ message: string; usuario: IUser }> => api.put(`/usuarios/${id}`, data),
  deleteUsuario: (id: number): Promise<{ message: string }> => api.delete(`/usuarios/${id}`),
  registrarEstatisticasLote: (payload: IEstatisticaLotePayload): Promise<{ message: string }> => api.post('/estatisticas/lote', payload),
  getEstatisticasAgrupadasPorData: (data: string): Promise<IEstatisticaAgrupada[]> => api.get('/estatisticas/por-data', { params: { data } }),
  limparTodosOsLancamentosDoDia: (data: string): Promise<{ message: string }> => api.delete('/limpeza/dia-completo', { params: { data } }),
  getRelatorioCompleto: (data_inicio: string, data_fim: string): Promise<IRelatorioCompleto> => api.get('/relatorio-completo', { params: { data_inicio, data_fim } }),
  getObitosPorData: (data: string): Promise<IObitoRegistro[]> => api.get('/obitos-registros', { params: { data } }),
  criarObitoRegistro: (payload: IObitoRegistroPayload): Promise<IObitoRegistro> => api.post('/obitos-registros', payload),
  atualizarObitoRegistro: (id: number, payload: IObitoRegistroPayload): Promise<IObitoRegistro> => api.put(`/obitos-registros/${id}`, payload),
  deletarObitoRegistro: (id: number): Promise<{ message: string }> => api.delete(`/obitos-registros/${id}`),
  limparRegistrosDoDia: (data: string): Promise<{ message:string }> => api.delete('/obitos-registros', { params: { data } }),
  createUnidade: (data: { nome: string; crbm_id: number }): Promise<IObm> => api.post('/unidades', data),
  updateUnidade: (id: number, data: { nome: string; crbm_id: number }): Promise<IObm> => api.put(`/unidades/${id}`, data),
  deleteUnidade: (id: number): Promise<{ message: string }> => api.delete(`/unidades/${id}`),
  createNatureza: (data: { grupo: string; subgrupo: string }): Promise<IDataApoio> => api.post('/naturezas', data),
  updateNatureza: (id: number, data: { grupo: string; subgrupo: string }): Promise<IDataApoio> => api.put(`/naturezas/${id}`, data),
  deleteNatureza: (id: number): Promise<{ message: string }> => api.delete(`/naturezas/${id}`),
  alterarPropriaSenha: (payload: { senhaAtual: string; novaSenha: string }): Promise<{ message: string }> => api.put('/perfil/alterar-senha', payload),
  getAuditoriaLogs: (page = 1, limit = 20): Promise<IPaginatedAuditoriaLogs> => api.get('/auditoria', { params: { page, limit } }),
};

export const {
  login, solicitarAcesso, getSolicitacoes, gerenciarSolicitacao,
  getCrbms, getCidades, getNaturezas, getNaturezasPorNomes,
  criarOcorrencia, getOcorrencias, updateOcorrencia, deleteOcorrencia, setOcorrenciaDestaque,
  getDashboardStats, getPlantao, getSupervisores, setSupervisorPlantao,
  getUsuarios, criarUsuario, updateUsuario, deleteUsuario,
  registrarEstatisticasLote, getEstatisticasAgrupadasPorData,
  limparTodosOsLancamentosDoDia, getRelatorioCompleto,
  getObitosPorData, criarObitoRegistro, atualizarObitoRegistro, deletarObitoRegistro, limparRegistrosDoDia,
  createUnidade, updateUnidade, deleteUnidade, createNatureza, updateNatureza, deleteNatureza,
  alterarPropriaSenha, getAuditoriaLogs
} = apiService;

